🩺 Part 1: Building /providers API — Structured Hospital Search
✅ Goal
Support the API:
GET /providers?drg=470&zip=10001&radius_km=40
→ Return a list of hospitals performing the specified DRG procedure within a ZIP code radius, sorted by cost.

🔍 Problem Breakdown
Parameters:
drg: Diagnosis-Related Group code (e.g., 470 = knee replacement)

zip: ZIP code to center the search

radius_km: Radius in kilometers for filtering

Desired Output:
All hospitals that perform the given DRG

Must be within the radius of the input ZIP code

Sorted by average_covered_charges (cost of procedure)

🧱 Database Schema Design
1. providers table
Basic hospital info from CSV:

provider_id (Rndrng_Prvdr_CCN)

name (Rndrng_Prvdr_Org_Name)

city, state, zip_code

2. procedures table
Each DRG performed by each provider:

provider_id (FK)

drg_code, drg_description

total_discharges

average_covered_charges

average_total_payments

average_medicare_payments

🚧 Difficulty: Geospatial Radius Filtering
To filter hospitals within radius_km of a ZIP, we need geographic coordinates.

Option 1: Nominatim API (❌ Failed)
Caused HTTP 429 and timeout errors under load

Unreliable for batch lookups or production use

Option 2: PostGIS (❌ Not Available)
Ideal SQL-native radius filtering

Not supported on Supabase (free tier restriction)

✅ Solution: ZIP Coordinate Mapping via SimpleMaps
We used SimpleMaps US ZIP Code Dataset for offline geocoding:

Mapped each ZIP code to (lat, lon)

Added lat/lon to the providers table during ETL

Used Python’s geopy.distance.geodesic() to compute runtime distances

🧪 Result
FastAPI backend with /providers endpoint

Non-blocking async requests using SQLAlchemy + thread pool for distance calcs

Hospitals filtered by ZIP radius

Sorted by average_covered_charges (ascending)



ok part 2 is just using LLM and prompt engineering so
when question -> using model llm capabilty to covert natural language like question to 
sql opeartion syntax, then use the syntax to apply.

it seems fun,

and now we are design a prompt, and add a new database for the ratings

oh wait, it also need to grounding , so we need to update prompts too.

curl -X 'POST' \
  'http://localhost:8000/ask' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "question": "What'\''s the cheapest hospital for knee replacement?"
}'

{
  "answer": "Generated SQL: SELECT p.name, p.city, p.state, pr.avg_total_payments\nFROM procedures pr\nJOIN providers p ON pr.provider_id = p.provider_id\nWHERE pr.drg_code = '470'\nORDER BY pr.avg_total_payments ASC\nLIMIT 1;",
  "sql_query": "SELECT p.name, p.city, p.state, pr.avg_total_payments\nFROM procedures pr\nJOIN providers p ON pr.provider_id = p.provider_id\nWHERE pr.drg_code = '470'\nORDER BY pr.avg_total_payments ASC\nLIMIT 1;"
}

curl -X 'POST' \
  'http://localhost:8000/ask' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "question": "What'\''s wealth today?"
}'{
  "answer": "I can only help with hospital pricing and quality information. Please ask about medical procedures, costs, or hospital ratings.",
  "sql_query": null
}

curl -X 'POST' \
  'http://localhost:8000/ask' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "question": "who are you?"
}'
{
  "answer": "I can only help with hospital pricing and quality information. Please ask about medical procedures, costs, or hospital ratings.",
  "sql_query": null
}

curl -X 'POST' \
  'http://localhost:8000/ask' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "question": "What'\''s the most expensive hospital for knee replacement?"
}'{
  "answer": "Generated SQL: SELECT provider_id, name, city, state, avg_total_payments\nFROM providers\nJOIN procedures ON providers.provider_id = procedures.provider_id\nWHERE drg_code = '470'\nORDER BY avg_total_payments DESC\nLIMIT 1;",
  "sql_query": "SELECT provider_id, name, city, state, avg_total_payments\nFROM providers\nJOIN procedures ON providers.provider_id = procedures.provider_id\nWHERE drg_code = '470'\nORDER BY avg_total_payments DESC\nLIMIT 1;"
}

first trial seems okay